#include <iostream>
#include <string>
#include <map>
#include <set>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;
typedef long long ll;

vector<vector<int>> grid;
vector<vector<int>> sumXY, sumYX;
int r, c;

void generateAllRectangles(int x, int y, bool xy) {
	if (x > r || y > c) { return; }

	int curRect = 0;
	for (int i = 0; i < x; i++)
		for (int j = 0; j < y; j++)
			curRect += grid[i][j];

	for (int i = 0; i <= r - x; i++) {
		int lastJ = 0;
		if (i % 2 == 0) {
			for (int j = 0; j <= c - y; j++) {
				if (xy) { sumXY[i][j] = curRect; }
				else { sumYX[i][j] = curRect; }

				if (j + y < c) {
					for (int i2 = i; i2 < i + x; i2++) {
						curRect -= grid[i2][j];
						curRect += grid[i2][j + y];
					}
				}
			}
			lastJ = c - y;
		}
		else {
			for (int j = c - y; j >= 0; j--) {
				if (xy) { sumXY[i][j] = curRect; }
				else { sumYX[i][j] = curRect; }

				if (j > 0) {
					for (int i2 = i; i2 < i + x; i2++) {
						curRect += grid[i2][j - 1];
						curRect -= grid[i2][j + y - 1];
					}
				}
			}
		}

		if (i < r - x) {
			for (int j2 = lastJ; j2 < lastJ + y; j2++) {
				curRect -= grid[i][j2];
				curRect += grid[i + x][j2];
			}
		}
	}
}

int findMaxRectangles(int x, int y, bool xy) {
	if (x > r || y > c) { return 0; }

	generateAllRectangles(x, y, true);
	generateAllRectangles(y, x, false);

	vector<vector<int>> dpR(r, vector<int>(c, 0));
	vector<vector<int>> dpL(r, vector<int>(c, 0));

	for (int i = r - 1; i >= 0; i--) {
		for (int j = c - 1; j >= 0; j--) {
			dpR[i][j] = max(sumXY[i][j], sumYX[i][j]);
			if (i < r - 1) { dpR[i][j] = max(dpR[i][j], dpR[i + 1][j]); }
			if (j < c - 1) { dpR[i][j] = max(dpR[i][j], dpR[i][j + 1]); }
		}
	}

	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			int ni = i - x + 1, nj = j - y + 1;
			if (ni >= 0 && nj >= 0) { dpL[i][j] = sumXY[ni][nj]; }

			ni = i - y + 1; nj = j - x + 1;
			if (ni >= 0 && nj >= 0) { dpL[i][j] = max(dpL[i][j], sumYX[ni][nj]); }

			if (i > 0) { dpL[i][j] = max(dpL[i][j], dpL[i - 1][j]); }
			if (j > 0) { dpL[i][j] = max(dpL[i][j], dpL[i][j - 1]); }
		}
	}

	int ans = 0;
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			int cur = 0;
			if (i > 0) { cur = max(cur, dpL[i - 1][c - 1]); }
			if (j > 0) { cur = max(cur, dpL[r-1][j - 1]); }
			if (i + x < r) { cur = max(cur, dpR[i + x][0]); }
			if (j + y < c) { cur = max(cur, dpR[0][j + y]); }
			cur += sumXY[i][j];
			ans = max(ans, cur);
		}
	}

	return ans;
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0), cout.tie(0);

	int x, y; cin >> r >> c >> x >> y;

	grid.resize(r, vector<int>(c));
	sumXY.resize(r, vector<int>(c, 0));
	sumYX.resize(r, vector<int>(c, 0));
	for (int i = 0; i < r; i++)
		for (int j = 0; j < c; j++)
			cin >> grid[i][j];

	int ans = max(findMaxRectangles(x, y, true), findMaxRectangles(y, x, false));
	cout << ans << '\n';
}